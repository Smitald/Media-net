{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\smital.deopurkar\\\\Desktop\\\\training\\\\TableAssignment-master\\\\TableAssignment-master\\\\src\\\\views\\\\MainPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { getRestaurants } from '../apis/restaurants';\nimport Table from '../components/Table';\nimport { STATES_ABBR } from '../utils/constants';\nconst styles = {\n  contentSection: {\n    border: '1px solid #dddddd',\n    textAlign: 'left',\n    padding: 8\n  },\n  headerSection: {\n    border: '1px solid #dddddd',\n    textAlign: 'left',\n    padding: 8\n  }\n};\n\nconst MainPage = ({\n  classes\n}) => {\n  _s();\n\n  const [restaurants, setRestaurants] = useState([]);\n  const [getFilteredRestaurants, setFilteredRestaurants] = useState([]);\n  const [genreFilter, setGenreFilter] = useState('all');\n  const [stateFilter, setStateFilter] = useState('all');\n  useEffect(() => {\n    getRestaurants().then(data => {\n      const sortData = data.sort((a, b) => a.name > b.name ? 1 : -1);\n      setRestaurants(sortData);\n      setFilteredRestaurants(sortData);\n    });\n  }, []);\n  useEffect(() => {\n    let filteredRestaurants = filterDataByGenre(restaurants);\n    filteredRestaurants = filterDataByState(filteredRestaurants);\n    setFilteredRestaurants(filteredRestaurants);\n  }, [genreFilter, stateFilter]);\n\n  const filterDataByGenre = data => {\n    if (genreFilter !== 'all') {\n      return data.filter(row => row.genre.includes(genreFilter));\n    }\n\n    return data;\n  };\n\n  const filterDataByState = data => {\n    if (stateFilter !== 'all') {\n      return data.filter(row => row.state.includes(stateFilter));\n    }\n\n    return data;\n  };\n\n  const headerOptions = [{\n    id: \"name\"\n  }, {\n    id: \"icao\"\n  }, {\n    id: \"iata\"\n  }, {\n    id: \"elevation\"\n  }, {\n    id: \"latitude\"\n  }, {\n    id: \"longitude\"\n  }, {\n    id: \"genre\"\n  }];\n\n  const renderDropdown = (currentVal, changeFunc, options) => {\n    return /*#__PURE__*/_jsxDEV(\"select\", {\n      value: currentVal,\n      onChange: changeFunc,\n      children: options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option,\n        children: option\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 32\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  };\n\n  const generateRow = row => {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: headerOptions.map(field => /*#__PURE__*/_jsxDEV(\"td\", {\n        children: row[field.id]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this))\n    }, row.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  };\n\n  const header = /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: headerOptions.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n      children: [header.id, header.filterOptions && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: header.filterOptions()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Table, {\n    renderRow: row => generateRow(row),\n    entries: getFilteredRestaurants,\n    header: header,\n    placeholder: \"Search by name, city, genre\",\n    textfilterOptions: ['name', 'city', 'genre'],\n    pageLimit: 4\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 7\n  }, this);\n};\n\n_s(MainPage, \"Wk30y0Ltgnp/FHfz5XpxfhUb874=\");\n\n_c = MainPage;\nexport default MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"sources":["C:/Users/smital.deopurkar/Desktop/training/TableAssignment-master/TableAssignment-master/src/views/MainPage.js"],"names":["React","useEffect","useState","getRestaurants","Table","STATES_ABBR","styles","contentSection","border","textAlign","padding","headerSection","MainPage","classes","restaurants","setRestaurants","getFilteredRestaurants","setFilteredRestaurants","genreFilter","setGenreFilter","stateFilter","setStateFilter","then","data","sortData","sort","a","b","name","filteredRestaurants","filterDataByGenre","filterDataByState","filter","row","genre","includes","state","headerOptions","id","renderDropdown","currentVal","changeFunc","options","map","option","generateRow","field","header","filterOptions"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getRestaurants } from '../apis/restaurants';\nimport Table from '../components/Table';\nimport { STATES_ABBR } from '../utils/constants';\n\nconst styles = {\n  contentSection: {\n    border: '1px solid #dddddd',\n    textAlign: 'left',\n    padding: 8\n  },\n  headerSection: {\n    border: '1px solid #dddddd',\n    textAlign: 'left',\n    padding: 8\n  }\n}\n\nconst MainPage = ({ classes }) => {\n \n  const [restaurants, setRestaurants] = useState([]);\n  const [getFilteredRestaurants, setFilteredRestaurants] = useState([]);\n  const [genreFilter, setGenreFilter] = useState('all');\n  const [stateFilter, setStateFilter] = useState('all');\n\n  useEffect(() => {\n    getRestaurants().then(data => {\n      const sortData = data.sort((a, b) => (a.name > b.name) ? 1 : -1)\n      setRestaurants(sortData);\n      setFilteredRestaurants(sortData);\n    });\n  }, []);\n\n  useEffect(() => {\n    let filteredRestaurants = filterDataByGenre(restaurants);\n    filteredRestaurants = filterDataByState(filteredRestaurants);\n    setFilteredRestaurants(filteredRestaurants);\n  }, [genreFilter, stateFilter]);\n\n  const filterDataByGenre = data => {\n    if (genreFilter !== 'all') {\n      return data.filter(row => row.genre.includes(genreFilter));\n    }\n    return data;\n  }\n\n  const filterDataByState = data => {\n    if (stateFilter !== 'all') {\n      return data.filter(row => row.state.includes(stateFilter));\n    }\n    return data;\n  }\n\n  const headerOptions = [\n    {\n      id: \"name\"\n    },\n    {\n      id: \"icao\"\n    },\n    {\n      id: \"iata\"\n    },\n    {\n      id: \"elevation\"\n    },\n    {\n      id: \"latitude\"\n    },\n    {\n      id: \"longitude\"\n    },\n    {\n      id: \"genre\"\n    }];\n\n\n\n  const renderDropdown = (currentVal, changeFunc, options) => {\n    return (\n      <select value={currentVal} onChange={changeFunc}>\n        {options.map(option => <option value={option}>{option}</option>)}\n      </select>\n    )\n  };\n\n\n  const generateRow = row => {\n    return (\n      <tr key={row.id}>\n        {headerOptions.map(field => (\n          <td >\n            {row[field.id]}\n          </td>\n        ))}\n      </tr>\n    )\n  };\n\n  const header = (\n    <tr>\n      {headerOptions.map(header => (\n        <th >\n          {header.id}\n          {header.filterOptions && (\n            <div>\n              {header.filterOptions()}\n            </div>\n          )}\n        </th>\n      ))}\n    </tr>\n  );\n\n  return (\n  \n      <Table\n        renderRow={row => generateRow(row)}\n        entries={getFilteredRestaurants}\n        header={header}\n        placeholder=\"Search by name, city, genre\"\n        textfilterOptions={['name', 'city', 'genre']}\n        pageLimit={4}\n      />\n   \n  )\n}\n\nexport default MainPage;"]},"metadata":{},"sourceType":"module"}