{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\smital.deopurkar\\\\Desktop\\\\training\\\\TableAssignment-master\\\\TableAssignment-master\\\\src\\\\components\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport SearchBar from './SearchBar';\nimport TablePagination from './TablePagination';\nimport CheckBox from './CheckBox';\n\nconst Table = ({\n  renderRow,\n  entries,\n  header,\n  classes,\n  placeholder = '',\n  textfilterOptions = [],\n  checklistoptions = [],\n  pageLimit\n}) => {\n  _s();\n\n  const [filter, setFilter] = useState('');\n  const [page, setPage] = useState(0);\n  const [filterList, activeFilter] = useState('');\n\n  const doescheckIncludeEntry = entry => {\n    return filter.length > 0 ? checklistoptions.filter(option => entry[option].toString().toLowerCase().includes(filter.toLowerCase())).length > 0 : true;\n  };\n\n  const doesIncludeEntry = entry => {\n    return filter.length > 0 ? textfilterOptions.filter(option => entry[option].toString().toLowerCase().includes(filter.toLowerCase())).length > 0 : true;\n  };\n\n  const getPaginatedEntries = entries => {\n    const offset = page * pageLimit;\n    return entries.slice(offset, offset + pageLimit);\n  };\n\n  const getFilteredEntries = () => {\n    return entries.filter(entry => doesIncludeEntry(entry));\n  };\n\n  const renderEntries = () => {\n    return getPaginatedEntries(getFilteredEntries());\n  };\n\n  const typeArray = [{\n    id: 1,\n    type: \"small\"\n  }, {\n    id: 2,\n    type: \"medium\"\n  }, {\n    id: 3,\n    type: \"large\"\n  }, {\n    id: 4,\n    type: \"heliport\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CheckBox, {\n      setValue: activeFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      setValue: setFilter,\n      placeholder: placeholder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [header, renderEntries().map(entry => renderRow(entry))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      pageLimit: pageLimit,\n      pages: getFilteredEntries().length,\n      currentPage: page,\n      setPage: setPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Table, \"KNsyXLxfWR8KD5K1k4fDJW99yBk=\");\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["C:/Users/smital.deopurkar/Desktop/training/TableAssignment-master/TableAssignment-master/src/components/Table.js"],"names":["React","useState","useEffect","SearchBar","TablePagination","CheckBox","Table","renderRow","entries","header","classes","placeholder","textfilterOptions","checklistoptions","pageLimit","filter","setFilter","page","setPage","filterList","activeFilter","doescheckIncludeEntry","entry","length","option","toString","toLowerCase","includes","doesIncludeEntry","getPaginatedEntries","offset","slice","getFilteredEntries","renderEntries","typeArray","id","type","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport SearchBar from './SearchBar';\nimport TablePagination from './TablePagination';\nimport CheckBox from './CheckBox';\n\n\n\nconst Table = ({ renderRow, entries, header, classes, placeholder = '', textfilterOptions = [],checklistoptions = [], pageLimit }) => {\n  const [filter, setFilter] = useState('');\n  const [page, setPage] = useState(0);\n  \n  const [ filterList, activeFilter ] = useState('');\n\n\n\n  const doescheckIncludeEntry = entry => {\n    \n\n    \n    return filter.length > 0 ? checklistoptions.filter(option => entry[option].toString().toLowerCase().includes(filter.toLowerCase())).length > 0 : true;\n  };\n\n\n\n  const doesIncludeEntry = entry => {\n    \n    return filter.length > 0 ? textfilterOptions.filter(option => entry[option].toString().toLowerCase().includes(filter.toLowerCase())).length > 0 : true;\n  };\n\n  const getPaginatedEntries = entries => {\n  \n    const offset = page * pageLimit;\n    return entries.slice(offset, offset + pageLimit);\n  }\n\n  const getFilteredEntries = () => {\n    return entries.filter(entry => doesIncludeEntry(entry));\n  }\n\n  const renderEntries = () => {\n    \n    return getPaginatedEntries(getFilteredEntries());\n  }\n \n  const typeArray=[\n    {id:1,type:\"small\"},\n    {id:2,type:\"medium\"},\n    {id:3,type:\"large\"},\n    {id:4,type:\"heliport\"},\n  \n  ]\n  return (\n    <div>\n   \n     <CheckBox\n      setValue={activeFilter}\n     />\n   \n     \n      <SearchBar \n        setValue={setFilter}\n        placeholder={placeholder}\n      />\n      <table >\n        {header}\n        {renderEntries().map(entry => renderRow(entry))}\n      </table>\n      <TablePagination \n        pageLimit={pageLimit}\n        pages={getFilteredEntries().length}\n        currentPage={page}\n        setPage={setPage}\n      />\n    </div>\n  )\n}\n\nexport default Table;"]},"metadata":{},"sourceType":"module"}