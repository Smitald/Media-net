{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\smital.deopurkar\\\\Desktop\\\\training\\\\TableAssignment-master\\\\TableAssignment-master\\\\src\\\\views\\\\MainPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { getRestaurants } from '../apis/restaurants';\nimport Table from '../components/Table';\nimport { STATES_ABBR } from '../utils/constants';\nconst styles = {\n  contentSection: {\n    border: '1px solid #dddddd',\n    textAlign: 'left',\n    padding: 8\n  },\n  headerSection: {\n    border: '1px solid #dddddd',\n    textAlign: 'left',\n    padding: 8\n  }\n};\n\nconst MainPage = ({\n  classes\n}) => {\n  _s();\n\n  const [restaurants, setRestaurants] = useState([]);\n  const [getFilteredRestaurants, setFilteredRestaurants] = useState([]);\n  const [genreFilter, setGenreFilter] = useState('all');\n  const [stateFilter, setStateFilter] = useState('all');\n  const [data, setData] = useState([]);\n\n  const getData = () => {\n    fetch('data.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(function (response) {\n      console.log(response);\n      return response.json();\n    }).then(function (myJson) {\n      console.log(myJson);\n      setData(myJson);\n    });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n  useEffect(() => {\n    let filteredRestaurants = filterDataByGenre(restaurants);\n    filteredRestaurants = filterDataByState(filteredRestaurants);\n    setFilteredRestaurants(filteredRestaurants);\n  }, [genreFilter, stateFilter]);\n\n  const filterDataByGenre = data => {\n    if (genreFilter !== 'all') {\n      return data.filter(row => row.genre.includes(genreFilter));\n    }\n\n    return data;\n  };\n\n  const filterDataByState = data => {\n    if (stateFilter !== 'all') {\n      return data.filter(row => row.state.includes(stateFilter));\n    }\n\n    return data;\n  };\n\n  const headerOptions = [{\n    id: \"name\"\n  }, {\n    id: \"city\"\n  }, {\n    id: \"state\",\n    filterOptions: () => renderDropdown(stateFilter, e => setStateFilter(e.target.value), renderStateOptions())\n  }, {\n    id: \"telephone\"\n  }, {\n    id: \"genre\",\n    filterOptions: () => renderDropdown(genreFilter, e => setGenreFilter(e.target.value), renderGenreOptions())\n  }];\n\n  const renderStateOptions = () => ['all', ...STATES_ABBR];\n\n  const renderGenreOptions = () => {\n    return restaurants.reduce((acc, val) => {\n      const genres = val.genre.split(',');\n      return Array.from(new Set([...acc, ...genres]));\n    }, ['all']);\n  };\n\n  const renderDropdown = (currentVal, changeFunc, options) => {\n    return /*#__PURE__*/_jsxDEV(\"select\", {\n      value: currentVal,\n      onChange: changeFunc,\n      children: options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option,\n        children: option\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 32\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  };\n\n  const generateRow = row => {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: headerOptions.map(field => /*#__PURE__*/_jsxDEV(\"td\", {\n        children: row[field.id]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this))\n    }, row.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  };\n\n  const header = /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: headerOptions.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n      children: [header.id, header.filterOptions && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: header.filterOptions()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Table, {\n    renderRow: row => generateRow(row),\n    entries: getFilteredRestaurants,\n    header: header,\n    placeholder: \"Search by name, city, genre\",\n    textfilterOptions: ['name', 'city', 'genre'],\n    pageLimit: 4\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 7\n  }, this);\n};\n\n_s(MainPage, \"RDhUvR74MCGazMdO3pZh1hpDYR8=\");\n\n_c = MainPage;\nexport default MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"sources":["C:/Users/smital.deopurkar/Desktop/training/TableAssignment-master/TableAssignment-master/src/views/MainPage.js"],"names":["React","useEffect","useState","getRestaurants","Table","STATES_ABBR","styles","contentSection","border","textAlign","padding","headerSection","MainPage","classes","restaurants","setRestaurants","getFilteredRestaurants","setFilteredRestaurants","genreFilter","setGenreFilter","stateFilter","setStateFilter","data","setData","getData","fetch","headers","then","response","console","log","json","myJson","filteredRestaurants","filterDataByGenre","filterDataByState","filter","row","genre","includes","state","headerOptions","id","filterOptions","renderDropdown","e","target","value","renderStateOptions","renderGenreOptions","reduce","acc","val","genres","split","Array","from","Set","currentVal","changeFunc","options","map","option","generateRow","field","header"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getRestaurants } from '../apis/restaurants';\nimport Table from '../components/Table';\nimport { STATES_ABBR } from '../utils/constants';\n\nconst styles = {\n  contentSection: {\n    border: '1px solid #dddddd',\n    textAlign: 'left',\n    padding: 8\n  },\n  headerSection: {\n    border: '1px solid #dddddd',\n    textAlign: 'left',\n    padding: 8\n  }\n}\n\nconst MainPage = ({ classes }) => {\n \n  const [restaurants, setRestaurants] = useState([]);\n  const [getFilteredRestaurants, setFilteredRestaurants] = useState([]);\n  const [genreFilter, setGenreFilter] = useState('all');\n  const [stateFilter, setStateFilter] = useState('all');\n  const [data,setData]=useState([]);\n  const getData=()=>{\n    fetch('data.json'\n    ,{\n      headers : { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       }\n    }\n    )\n      .then(function(response){\n        console.log(response)\n        return response.json();\n      })\n      .then(function(myJson) {\n        console.log(myJson);\n        setData(myJson)\n      });\n  }\n  useEffect(() => {\n    getData()}, []);\n\n  useEffect(() => {\n    let filteredRestaurants = filterDataByGenre(restaurants);\n    filteredRestaurants = filterDataByState(filteredRestaurants);\n    setFilteredRestaurants(filteredRestaurants);\n  }, [genreFilter, stateFilter]);\n\n  const filterDataByGenre = data => {\n    if (genreFilter !== 'all') {\n      return data.filter(row => row.genre.includes(genreFilter));\n    }\n    return data;\n  }\n\n  const filterDataByState = data => {\n    if (stateFilter !== 'all') {\n      return data.filter(row => row.state.includes(stateFilter));\n    }\n    return data;\n  }\n\n  const headerOptions = [\n    {\n      id: \"name\"\n    },\n    {\n      id: \"city\"\n    },\n    {\n      id: \"state\",\n      filterOptions: () => renderDropdown(stateFilter, e => setStateFilter(e.target.value), renderStateOptions())\n    },\n    {\n      id: \"telephone\"\n    },\n    {\n      id: \"genre\",\n      filterOptions: () => renderDropdown(genreFilter, e => setGenreFilter(e.target.value), renderGenreOptions())\n    }];\n\n  const renderStateOptions = () => ['all', ...STATES_ABBR];\n\n  const renderGenreOptions = () => {\n    return restaurants.reduce((acc, val) => {\n      const genres = val.genre.split(',');\n      return Array.from(new Set([...acc, ...genres]));\n    }, ['all'])\n  };\n\n  const renderDropdown = (currentVal, changeFunc, options) => {\n    return (\n      <select value={currentVal} onChange={changeFunc}>\n        {options.map(option => <option value={option}>{option}</option>)}\n      </select>\n    )\n  };\n\n\n  const generateRow = row => {\n    return (\n      <tr key={row.id}>\n        {headerOptions.map(field => (\n          <td >\n            {row[field.id]}\n          </td>\n        ))}\n      </tr>\n    )\n  };\n\n  const header = (\n    <tr>\n      {headerOptions.map(header => (\n        <th >\n          {header.id}\n          {header.filterOptions && (\n            <div>\n              {header.filterOptions()}\n            </div>\n          )}\n        </th>\n      ))}\n    </tr>\n  );\n\n  return (\n  \n      <Table\n        renderRow={row => generateRow(row)}\n        entries={getFilteredRestaurants}\n        header={header}\n        placeholder=\"Search by name, city, genre\"\n        textfilterOptions={['name', 'city', 'genre']}\n        pageLimit={4}\n      />\n   \n  )\n}\n\nexport default MainPage;"]},"metadata":{},"sourceType":"module"}